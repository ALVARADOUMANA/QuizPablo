{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useApi = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Validate URL\n        if (!url) {\n          throw new Error('API URL is not defined');\n        }\n        setLoading(true);\n\n        // Log the exact URL being fetched\n        console.log('Fetching URL:', url);\n        const response = await fetch(url, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        console.log('Raw response:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url\n        });\n        if (!response.ok) {\n          // Try to get error details\n          const errorText = await response.text();\n          console.error('Error response text:', errorText);\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n        }\n\n        // Check content type\n        const contentType = response.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          throw new Error(`Expected JSON, but got ${contentType}`);\n        }\n        const result = await response.json();\n        console.log('Parsed JSON data:', result);\n        setData(result);\n      } catch (err) {\n        console.error('Fetch error details:', {\n          message: err.message,\n          name: err.name,\n          stack: err.stack\n        });\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useApi, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useApi;","map":{"version":3,"names":["useState","useEffect","useApi","url","_s","data","setData","loading","setLoading","error","setError","fetchData","Error","console","log","response","fetch","headers","status","statusText","ok","errorText","text","contentType","get","includes","result","json","err","message","name","stack"],"sources":["C:/Users/Usuario/Documents/3_FundaWeb/Prueba/front/src/hooks/useApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useApi = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Validate URL\r\n        if (!url) {\r\n          throw new Error('API URL is not defined');\r\n        }\r\n\r\n        setLoading(true);\r\n        \r\n        // Log the exact URL being fetched\r\n        console.log('Fetching URL:', url);\r\n\r\n        const response = await fetch(url, {\r\n          headers: {\r\n            'Accept': 'application/json'\r\n          }\r\n        });\r\n        \r\n        console.log('Raw response:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          url: response.url\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          // Try to get error details\r\n          const errorText = await response.text();\r\n          console.error('Error response text:', errorText);\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n        }\r\n        \r\n        // Check content type\r\n        const contentType = response.headers.get('content-type');\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n          throw new Error(`Expected JSON, but got ${contentType}`);\r\n        }\r\n        \r\n        const result = await response.json();\r\n        \r\n        console.log('Parsed JSON data:', result);\r\n        \r\n        setData(result);\r\n      } catch (err) {\r\n        console.error('Fetch error details:', {\r\n          message: err.message,\r\n          name: err.name,\r\n          stack: err.stack\r\n        });\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n};\r\n\r\nexport default useApi;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,MAAM,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,IAAI,CAACR,GAAG,EAAE;UACR,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEAJ,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACAK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEX,GAAG,CAAC;QAEjC,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAE;UAChCc,OAAO,EAAE;YACP,QAAQ,EAAE;UACZ;QACF,CAAC,CAAC;QAEFJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;UAC3BI,MAAM,EAAEH,QAAQ,CAACG,MAAM;UACvBC,UAAU,EAAEJ,QAAQ,CAACI,UAAU;UAC/BhB,GAAG,EAAEY,QAAQ,CAACZ;QAChB,CAAC,CAAC;QAEF,IAAI,CAACY,QAAQ,CAACK,EAAE,EAAE;UAChB;UACA,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;UACvCT,OAAO,CAACJ,KAAK,CAAC,sBAAsB,EAAEY,SAAS,CAAC;UAChD,MAAM,IAAIT,KAAK,CAAC,uBAAuBG,QAAQ,CAACG,MAAM,cAAcG,SAAS,EAAE,CAAC;QAClF;;QAEA;QACA,MAAME,WAAW,GAAGR,QAAQ,CAACE,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,MAAM,IAAIb,KAAK,CAAC,0BAA0BW,WAAW,EAAE,CAAC;QAC1D;QAEA,MAAMG,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;QAEpCd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEY,MAAM,CAAC;QAExCpB,OAAO,CAACoB,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZf,OAAO,CAACJ,KAAK,CAAC,sBAAsB,EAAE;UACpCoB,OAAO,EAAED,GAAG,CAACC,OAAO;UACpBC,IAAI,EAAEF,GAAG,CAACE,IAAI;UACdC,KAAK,EAAEH,GAAG,CAACG;QACb,CAAC,CAAC;QACFrB,QAAQ,CAACkB,GAAG,CAAC;MACf,CAAC,SAAS;QACRpB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CAhEIF,MAAM;AAkEZ,eAAeA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}